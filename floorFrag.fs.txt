#version 410 core

vec3 getDirectionalLight(vec3 norm, vec3 viewDir);
vec3 getPointLight(vec3 norm, vec3 viewDir);
vec3 getSpotLight(vec3 norm, vec3 viewDir);

out vec4 FragColor;

in vec3 normal ;
in vec3 posWS ;
in vec2 uv ;

struct pointLight{
	vec3 position;
	vec3 color;
	float Kc ;
	float Kl;
	float Ke;
};

struct spotLight{
	vec3 position;
	vec3 direction;
	vec3 color;
	float Kc ;
	float Kl;
	float Ke;

	float innerRad;
	float outerRad;
};

uniform vec3 lightCol;
uniform vec3 lightDir;
uniform vec3 objectCol;
uniform vec3 viewPos;

uniform pointLight pLight;
uniform spotLight sLight;

uniform sampler2D diffuseTexture;
uniform sampler2D specTexture;

float ambientFactor = 0.1;
float shine = 32 ;
float specularStrength = 0.2;


void main()
{    	

	vec3 norm = normalize(normal);
	vec3 viewDir = normalize(viewPos - posWS);
	vec3 result = vec3(0.0);
	//amb
	result = getDirectionalLight(norm, viewDir);
	vec3 pointLightResult = getPointLight(norm, viewDir);
	vec3 spotLightResult = getSpotLight(norm, viewDir);
	 
	result = result ;
	FragColor = vec4(result,1.0) ;
};

vec3 getDirectionalLight(vec3 norm, vec3 viewDir){
	vec3 diffMapColor = texture(diffuseTexture, uv).xyz;
	float specMapColor = texture(specTexture, uv).x;

	vec3 ambientColor = lightCol*diffMapColor*ambientFactor;
	//diff
	float diffuseFactor = dot(norm, -lightDir);
	diffuseFactor = max(diffuseFactor,0.0);
	vec3 diffuseColor = lightCol*diffMapColor*diffuseFactor ;
	//spec
	vec3 reflectDir = reflect(lightDir, norm) ;
	float specularFactor = dot(viewDir, reflectDir) ;
	//blinn
	//vec3 halfwayDir = normalize(-lightDir + viewDir) ;
	//float specularFactor = dot(normal, halfwayDir) ;


	specularFactor = max(specularFactor,0.0) ;
	specularFactor = pow(specularFactor, shine);
	vec3 specularColor = lightCol * specularFactor * specMapColor;
	vec3 result = ambientColor + diffuseColor + specularColor;
	return result;
}
vec3 getPointLight (vec3 norm, vec3 viewDir){
	//pointLight
	 //***************8ADD MORE POINTLIGHT************
	 float dist = length(pLight.position - posWS) ;
	 float attn = 1.0/(pLight.Kc + (pLight.Kl*dist) + (pLight.Ke*(dist*dist)));
	 vec3 pLightDir = normalize(pLight.position - posWS);

	 vec3 ambientColor = lightCol*objectCol*ambientFactor;
	 ambientColor = ambientColor * attn ; 

	float diffuseFactor = dot(norm, pLightDir);
	diffuseFactor = max(diffuseFactor,0.0);
	vec3 diffuseColor = pLight.color*objectCol*diffuseFactor ;
	diffuseColor = diffuseColor *attn;

	vec3 reflectDir = reflect(pLightDir, norm) ;
	float specularFactor = dot(viewDir, reflectDir) ;
	//blinn
	//vec3 halfwayDir = normalize(-lightDir + viewDir) ;
	//float specularFactor = dot(normal, halfwayDir) ;
	specularFactor = max(specularFactor, 0.0) ;
	specularFactor = pow(specularFactor, shine);
	vec3 specularColor = pLight.color * specularFactor * specularStrength;
	specularColor = specularColor*attn ;
	vec3 pointLightResult = ambientColor + diffuseColor + specularColor;
	return pointLightResult;
}

vec3 getSpotLight (vec3 norm, vec3 viewDir){
	//spotLight


	 float dist = length(sLight.position - posWS) ;
	 float attn = 1.0/(sLight.Kc + (sLight.Kl*dist) + (sLight.Ke*(dist*dist)));
	 vec3 sLightDir = normalize(sLight.position - posWS);

	float diffuseFactor = dot(norm, sLightDir);
	diffuseFactor = max(diffuseFactor,0.0);
	vec3 diffuseColor = sLight.color*objectCol*diffuseFactor ;
	diffuseColor = diffuseColor *attn;

	vec3 reflectDir = reflect(sLightDir, norm) ;
	float specularFactor = dot(viewDir, reflectDir) ;
	//blinn
	//vec3 halfwayDir = normalize(-lightDir + viewDir) ;
	//float specularFactor = dot(normal, halfwayDir) ;
	specularFactor = max(specularFactor, 0.0) ;
	specularFactor = pow(specularFactor, shine);
	vec3 specularColor = sLight.color * specularFactor * specularStrength;
	specularColor = specularColor*attn ;

	float theta = dot(-sLightDir, normalize(sLight.direction));
	float denom = (sLight.innerRad - sLight.outerRad);
	float illum = (theta - sLight.outerRad) / denom ;
	illum = clamp(illum, 0.0, 1.0);
	diffuseColor = diffuseColor * illum;
	specularColor = specularColor * illum;

	vec3 spotLightResult = diffuseColor + specularColor;
	return spotLightResult;
}